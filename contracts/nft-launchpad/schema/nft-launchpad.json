{
  "contract_name": "nft-launchpad",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Message type for `instantiate` entry_point",
    "type": "object",
    "required": [
      "colection_code_id",
      "collection_info",
      "launchpad_fee",
      "random_seed"
    ],
    "properties": {
      "colection_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "collection_info": {
        "$ref": "#/definitions/ColectionInfo"
      },
      "launchpad_collector": {
        "type": [
          "string",
          "null"
        ]
      },
      "launchpad_fee": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "random_seed": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "ColectionInfo": {
        "type": "object",
        "required": [
          "creator",
          "max_supply",
          "name",
          "symbol",
          "uri_prefix",
          "uri_suffix"
        ],
        "properties": {
          "creator": {
            "type": "string"
          },
          "max_supply": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "name": {
            "type": "string"
          },
          "reserved_tokens": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "royalty_payment_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "royalty_percentage": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "symbol": {
            "type": "string"
          },
          "token_id_offset": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "uri_prefix": {
            "type": "string"
          },
          "uri_suffix": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Message type for `execute` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "add_mint_phase"
        ],
        "properties": {
          "add_mint_phase": {
            "type": "object",
            "required": [
              "phase_data"
            ],
            "properties": {
              "after_phase_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "phase_data": {
                "$ref": "#/definitions/PhaseData"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_mint_phase"
        ],
        "properties": {
          "update_mint_phase": {
            "type": "object",
            "required": [
              "phase_data",
              "phase_id"
            ],
            "properties": {
              "phase_data": {
                "$ref": "#/definitions/PhaseData"
              },
              "phase_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_mint_phase"
        ],
        "properties": {
          "remove_mint_phase": {
            "type": "object",
            "required": [
              "phase_id"
            ],
            "properties": {
              "phase_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_whitelist"
        ],
        "properties": {
          "add_whitelist": {
            "type": "object",
            "required": [
              "phase_id",
              "whitelists"
            ],
            "properties": {
              "phase_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "whitelists": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_whitelist"
        ],
        "properties": {
          "remove_whitelist": {
            "type": "object",
            "required": [
              "addresses",
              "phase_id"
            ],
            "properties": {
              "addresses": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "phase_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "deactivate_launchpad"
        ],
        "properties": {
          "deactivate_launchpad": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "activate_launchpad"
        ],
        "properties": {
          "activate_launchpad": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "phase_id"
            ],
            "properties": {
              "amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "phase_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "PhaseData": {
        "type": "object",
        "required": [
          "end_time",
          "is_public",
          "max_nfts_per_address",
          "price",
          "start_time"
        ],
        "properties": {
          "end_time": {
            "$ref": "#/definitions/Timestamp"
          },
          "is_public": {
            "type": "boolean"
          },
          "max_nfts_per_address": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_supply": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "price": {
            "$ref": "#/definitions/Coin"
          },
          "start_time": {
            "$ref": "#/definitions/Timestamp"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Message type for `query` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_launchpad_info"
        ],
        "properties": {
          "get_launchpad_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_phase_configs"
        ],
        "properties": {
          "get_all_phase_configs": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mintable"
        ],
        "properties": {
          "mintable": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_all_phase_configs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_PhaseConfigResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PhaseConfigResponse"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "PhaseConfigResponse": {
          "type": "object",
          "required": [
            "end_time",
            "is_public",
            "max_nfts_per_address",
            "phase_id",
            "price",
            "start_time",
            "total_supply"
          ],
          "properties": {
            "end_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "is_public": {
              "type": "boolean"
            },
            "max_nfts_per_address": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_supply": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "phase_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Coin"
            },
            "start_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "total_supply": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_launchpad_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LaunchpadInfo",
      "type": "object",
      "required": [
        "collection_address",
        "creator",
        "is_active",
        "last_issued_id",
        "last_phase_id",
        "launchpad_fee",
        "max_supply",
        "start_phase_id",
        "total_supply",
        "uri_prefix",
        "uri_suffix"
      ],
      "properties": {
        "collection_address": {
          "$ref": "#/definitions/Addr"
        },
        "creator": {
          "$ref": "#/definitions/Addr"
        },
        "is_active": {
          "type": "boolean"
        },
        "last_issued_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "last_phase_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "launchpad_fee": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_supply": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_phase_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_supply": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "uri_prefix": {
          "type": "string"
        },
        "uri_suffix": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "mintable": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_MintableResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MintableResponse"
      },
      "definitions": {
        "MintableResponse": {
          "type": "object",
          "required": [
            "phase_id",
            "remaining_nfts"
          ],
          "properties": {
            "phase_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "remaining_nfts": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
